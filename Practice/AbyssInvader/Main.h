#pragma once

//--------------------------------------------------------------------
// 화면 깜빡임을 없애기 위한 화면 버퍼.
// 게임이 진행되는 상황을 매번 화면을 지우고 비행기 찍고, 지우고 찍고,
// 하게 되면 화면이 깜빡깜빡 거리게 된다.
//
// 그러므로 화면과 똑같은 크기의 메모리를 할당한 다음에 화면에 바로 찍지않고
// 메모리(버퍼)상에 그림을 그리고 메모리의 화면을 그대로 화면에 찍어준다.
//
// 이렇게 해서 화면을 매번 지우고, 그리고, 지우고, 그리고 하지 않고
// 메모리(버퍼)상의 그림을 화면에 그리는 작업만 하게 되어 깜박임이 없어진다.
//
// 버퍼의 각 줄 마지막엔 NULL 을 넣어 문자열로서 처리하며, 
// 한줄한줄을 printf 로 찍어나갈 것이다.
//
// for ( N = 0 ~ height )
// {
// 	  cs_MoveCursor(0, N);
//    printf(szScreenBuffer[N]);
// }
//
// 줄바꿈에 printf("\n") 을 쓰지 않고 커서좌표를 이동하는 이유는
// 화면을 꽉 차게 출력하고 줄바꿈을 하면 2칸이 내려가거나 화면이 밀릴 수 있으므로
// 매 줄 출력마다 좌표를 강제로 이동하여 확실하게 출력한다.
//--------------------------------------------------------------------
//--------------------------------------------------------------------
// GetAsyncKeyState(int iKey)  #include <Windows.h>
//
// 윈도우 API 로 키보드가 눌렸는지를 확인한다.
// 인자로 키보드 버튼에 대한 디파인 값을 넣으면 해당 키가 눌렸는지 (눌렸던적이 있는지) 를 확인 해준다.
// 모든 키에대한 확인이 가능하고, 비동기로 체크가 되므로 게임에서도 쓰기 좋다.
//
// Virtual-Key Codes
//
// VK_SPACE / VK_ESCAPE / VK_LEFT / VK_UP / 키보드 문자는 대문자 아스키 코드와 같음.
// winuser.h 파일에 위와 같이 디파인 되어 있다.
//
//
// GetAsyncKeyState(VK_LEFT) 호출시 결과값은
//
// 0x0001  > *이전 체크 이후 눌린적이 있음
// 0x8000  > 지금 눌려있음
// 0x8001  > *이전 체크 이후 눌린적도 있고 지금도 눌려 있음
//
// * 이전 체크라는건 이전에 GetAsyncKeyState 를 호출한 때를 말 한다.
// 
// 10프레임 짜리 게임이라면 1초에 10회의 키 체크를 하게 되므로 체크 간격은 20ms 가 된다.
// 빠른 커맨드 입력이 필요한 게임에서는 20ms 이내에 여러개의 키입력이 있다면 체크하지 못하는 키 입력이 발생 할 수 있다.
// 그래서 0x0001 비트에 대한 처리도 필요하다.
//
// 키가 눌릴 때 최초 1회만 체크 하고자 한다면 추가 변수를 할당하여 알아서 해결 해야 함!
//
char ScreenBuffer[SCREEN_HEIGHT][SCREEN_WIDTH];

//--------------------------------------------------------------------
// 아군 구조체 선언
//--------------------------------------------------------------------
struct _PLAYER
{
	int HP;					// 플레이어 HP

	int X;						// 플레이어 좌표
	int Y;

	int Visible;				// 플레이어 생존 여부.

};

//--------------------------------------------------------------------
// 플레이어 인스턴스 선언, (1인용 이니 하나만 하자)
//--------------------------------------------------------------------
_PLAYER _Player;

//--------------------------------------------------------------------
// 미사일 구조체 선언
//--------------------------------------------------------------------
struct _Missile
{
	int X;
	int Y;

	int Visible;
};

//--------------------------------------------------------------------
// 미사일 선언
//--------------------------------------------------------------------
_Missile _Missiles[30];


//--------------------------------------------------------------------
// 현재 미사일 수
//--------------------------------------------------------------------
int _MissileCount = 0;

//--------------------------------------------------------------------
// 몬스터 구조체 선언
//--------------------------------------------------------------------
struct _Monster
{
	int X;
	int Y;

	int Visible;
};

//--------------------------------------------------------------------
// 몬스터 인스턴스 선언,
//--------------------------------------------------------------------
_Monster _Monsters[20];

//--------------------------------------------------------------------
// 현재 몬스터 수.
//--------------------------------------------------------------------
int _MonsterCount = 0;

//--------------------------------------------------------------------
// 스테이지 수
//--------------------------------------------------------------------
const int _StageCount = 3;

//--------------------------------------------------------------------
// 스테이지 명 배열
//--------------------------------------------------------------------
const char* _Stages[_StageCount] = {"Stage1.data", "Stage2.data", "Stage3.data"};

//--------------------------------------------------------------------
// 게임 시작시 전체 데이터 초기화용.
//--------------------------------------------------------------------
void Player_Initial(void);


//////////////////////////////////////////////////////////////////////
//
// 출력부 함수들....
//
//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
// 버퍼의 내용을 화면으로 찍어주는 함수.
//
// 적군,아군,총알 등을 szScreenBuffer 에 넣어주고, 
// 1 프레임이 끝나는 마지막에 본 함수를 호출하여 버퍼 -> 화면 으로 그린다.
//--------------------------------------------------------------------
void Buffer_Flip(void);
//--------------------------------------------------------------------
// 화면 버퍼를 지워주는 함수
//
// 매 프레임 그림을 그리기 직전에 버퍼를 지워 준다. 
// 안그러면 이전 프레임의 잔상이 남으니까
//--------------------------------------------------------------------
void Buffer_Clear(void);

//--------------------------------------------------------------------
// 버퍼의 특정 위치에 원하는 문자를 출력.
//
// 입력 받은 X,Y 좌표에 아스키코드 하나를 출력한다. (버퍼에 그림)
//--------------------------------------------------------------------
void Sprite_Draw(int X, int Y, char chSprite);




//////////////////////////////////////////////////////////////////////
//
// 플레이어 처리부 함수들
//
//////////////////////////////////////////////////////////////////////
//--------------------------------------------------------------------
// 키보드입력을 받아서 플레이어를 처리한다.
//
// ESC 를 누를 경우 false 리턴, (종료처리)
//--------------------------------------------------------------------
bool KeyProcess(void);

//--------------------------------------------------------------------
// 스크린 버퍼에 플레이어 그리기
//--------------------------------------------------------------------
void Draw_Player(void);

//--------------------------------------------------------------------
// 스크린 버퍼에 미사일 이동
//--------------------------------------------------------------------
void Missile_Move(void);

//--------------------------------------------------------------------
// 스크린 버퍼에 미사일 그리기
//--------------------------------------------------------------------
void Draw_Missile(void);

//--------------------------------------------------------------------
// 무브패턴 최초 설정
//--------------------------------------------------------------------
void MovePattern_Set();

//--------------------------------------------------------------------
// 몬스터 최초 설정
//--------------------------------------------------------------------
void Monster_Set();

//--------------------------------------------------------------------
// 스테이지 최초 설정
//--------------------------------------------------------------------
void Stage_Set();

//--------------------------------------------------------------------
// 몬스터 그리기
//--------------------------------------------------------------------
void Draw_Monster(void);

//--------------------------------------------------------------------
// 생존 판정
//--------------------------------------------------------------------
bool Check_Survive(void);